# bot_commands.py
"""
Telegram –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram
"""
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from config import Config
from database.storage import Storage


class BotCommands:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, config: Config, storage: Storage):
        self.config = config
        self.storage = storage
        self.admin_ids = self._get_admin_ids()
        
    def _get_admin_ids(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        admin_ids_str = os.getenv('ADMIN_IDS', '')
        if admin_ids_str:
            return [int(id.strip()) for id in admin_ids_str.split(',')]
        return []
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_ids
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Telegram-–∫–∞–Ω–∞–ª–∞.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/post - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
/help - –ü–æ–º–æ—â—å

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
/settings - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""
        await update.message.reply_text(welcome_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_7d = self.storage.get_statistics(7)
        stats_30d = self.storage.get_statistics(30)
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π*

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:
‚îú –í—Å–µ–≥–æ: {stats_7d['total']} –ø–æ—Å—Ç–æ–≤
‚îú GitHub: {stats_7d['github']}
‚îî Habr: {stats_7d['habr']}

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:
‚îú –í—Å–µ–≥–æ: {stats_30d['total']} –ø–æ—Å—Ç–æ–≤
‚îú GitHub: {stats_30d['github']}
‚îî Habr: {stats_30d['habr']}

üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats_30d['total'] / 30:.1f}
"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_stats')],
            [InlineKeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã", callback_data='last_posts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        status_text = f"""
ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚îú –†–µ–∂–∏–º: {self.config.run_mode}
‚îú –ü–æ—Å—Ç–æ–≤ –∑–∞ —Ü–∏–∫–ª: {self.config.posts_per_cycle}
‚îú –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config.posting_interval_hours}—á
‚îî –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏: {self.config.delay_between_posts}—Å

üì° *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*
‚îú GitHub: {'‚úÖ' if self.config.sources.get('github_enabled') else '‚ùå'}
‚îî Habr: {'‚úÖ' if self.config.sources.get('habr_enabled') else '‚ùå'}

üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.storage.db_path}
"""
        
        await update.message.reply_text(
            status_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def post_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /post - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤...")
        
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ bot.run_posting_cycle()
        
        await update.message.reply_text("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data='set_interval')],
            [InlineKeyboardButton("üìä –ü–æ—Å—Ç–æ–≤ –∑–∞ —Ü–∏–∫–ª", callback_data='set_posts_per_cycle')],
            [InlineKeyboardButton("üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data='set_sources')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        help_text = """
üìñ *–ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/post - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é
/settings - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–û–ø–∏—Å–∞–Ω–∏–µ:*
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å GitHub Trending –∏ Habr, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ AI –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–∞–Ω–∞–ª.

*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*
‚Ä¢ GitHub Trending - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
‚Ä¢ Habr - –ª—É—á—à–∏–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

*–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:*
‚Ä¢ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π - –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
‚Ä¢ –†–∞–∑–æ–≤—ã–π - –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings
"""
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if query.data == 'refresh_stats':
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_7d = self.storage.get_statistics(7)
            stats_30d = self.storage.get_statistics(30)
            
            stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π* (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:
‚îú –í—Å–µ–≥–æ: {stats_7d['total']} –ø–æ—Å—Ç–æ–≤
‚îú GitHub: {stats_7d['github']}
‚îî Habr: {stats_7d['habr']}

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:
‚îú –í—Å–µ–≥–æ: {stats_30d['total']} –ø–æ—Å—Ç–æ–≤
‚îú GitHub: {stats_30d['github']}
‚îî Habr: {stats_30d['habr']}
"""
            
            await query.edit_message_text(
                stats_text,
                parse_mode=ParseMode.MARKDOWN
            )
        
        elif query.data == 'last_posts':
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
            last_posts = self.storage.get_last_published(5)
            
            posts_text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤:*\n\n"
            for i, post in enumerate(last_posts, 1):
                posts_text += f"{i}. [{post['source']}] {post['title'][:50]}...\n"
                posts_text += f"   üìÖ {post['published_at']}\n\n"
            
            await query.edit_message_text(
                posts_text,
                parse_mode=ParseMode.MARKDOWN
            )
    
    def setup_handlers(self, application: Application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("post", self.post_command))
        application.add_handler(CommandHandler("settings", self.settings_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))


async def run_command_bot():
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
    –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
    """
    config = Config.load()
    storage = Storage(config.database_path)
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.telegram_bot_token).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    bot_commands = BotCommands(config, storage)
    bot_commands.setup_handlers(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    print("ü§ñ –ë–æ—Ç –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()


if __name__ == '__main__':
    asyncio.run(run_command_bot())