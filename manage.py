# manage.py
"""
–°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""
import argparse
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from main import TelegramChannelBot
from config import Config
from database.storage import Storage


async def test_parsers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤...\n")
    
    config = Config.load()
    bot = TelegramChannelBot(config)
    
    # –¢–µ—Å—Ç GitHub
    print("üìä GitHub Trending:")
    github_items = await bot.github_parser.fetch_trending('python', 'daily')
    for i, item in enumerate(github_items[:3], 1):
        print(f"{i}. {item['title']}")
        print(f"   ‚≠ê {item['stars']} | +{item['stars_today']} —Å–µ–≥–æ–¥–Ω—è")
        print(f"   üîó {item['url']}\n")
    
    # –¢–µ—Å—Ç Habr
    print("\nüìö Habr —Å—Ç–∞—Ç—å–∏:")
    habr_items = await bot.habr_parser.fetch_articles('daily', 3)
    for i, item in enumerate(habr_items, 1):
        print(f"{i}. {item['title']}")
        print(f"   üëÅ {item['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ | ‚¨ÜÔ∏è {item['rating']}")
        print(f"   üîó {item['url']}\n")


async def test_ai():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n")
    
    config = Config.load()
    bot = TelegramChannelBot(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    test_content = {
        'title': 'awesome-python',
        'description': 'A curated list of awesome Python frameworks, libraries, software and resources',
        'url': 'https://github.com/vinta/awesome-python',
        'source': 'github'
    }
    
    processed = await bot.ai_processor.process_post(
        title=test_content['title'],
        description=test_content['description'],
        url=test_content['url'],
        source=test_content['source']
    )
    
    print("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:")
    print("=" * 50)
    print(processed['formatted_text'])
    print("=" * 50)


async def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n")
    
    config = Config.load()
    storage = Storage(config.database_path)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π
    stats_7d = storage.get_statistics(7)
    print(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
    print(f"  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats_7d['total']}")
    print(f"  GitHub: {stats_7d['github']}")
    print(f"  Habr: {stats_7d['habr']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
    stats_30d = storage.get_statistics(30)
    print(f"\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:")
    print(f"  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats_30d['total']}")
    print(f"  GitHub: {stats_30d['github']}")
    print(f"  Habr: {stats_30d['habr']}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤:")
    last_posts = storage.get_last_published(5)
    for i, post in enumerate(last_posts, 1):
        print(f"{i}. [{post['source']}] {post['title']}")
        print(f"   {post['published_at']}")


async def cleanup_db(days: int = 90):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    
    config = Config.load()
    storage = Storage(config.database_path)
    
    deleted = storage.cleanup_old_records(days)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")


def main():
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram Channel Bot')
    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥—ã
    subparsers.add_parser('test-parsers', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–æ–≤')
    subparsers.add_parser('test-ai', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    subparsers.add_parser('stats', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏')
    cleanup_parser.add_argument('--days', type=int, default=90, help='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π')
    
    args = parser.parse_args()
    
    if args.command == 'test-parsers':
        asyncio.run(test_parsers())
    elif args.command == 'test-ai':
        asyncio.run(test_ai())
    elif args.command == 'stats':
        asyncio.run(show_stats())
    elif args.command == 'cleanup':
        asyncio.run(cleanup_db(args.days))
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
